[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/MRPTLib.js",
    "content": "const MRPTLIB = {\"version\": \"1.0\"};\nimport * as plots from './plots/index'\nObject.assign(MRPTLIB, require('./core'));\nObject.assign(MRPTLIB, require('./math'));\nObject.assign(MRPTLIB, require('./meshes'));\nObject.assign(MRPTLIB, { plots });\n\nexport default MRPTLIB;\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/MRPTLib.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "MRPTLIB",
    "memberof": "src/MRPTLib.js",
    "static": true,
    "longname": "src/MRPTLib.js~MRPTLIB",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js",
    "importStyle": "MRPTLIB",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"version\": string}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/core/Message.js",
    "content": "/**\n * @class Message\n */\nexport default class Message {\n    /**\n     * @constructor\n     * @param {Object} msg : message to be stored in object\n     */\n    constructor(msg) {\n        Object.assign(this, msg);\n    }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/Message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "Message",
    "memberof": "src/core/Message.js",
    "static": true,
    "longname": "src/core/Message.js~Message",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/Message.js",
    "importStyle": "Message",
    "description": "",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Message"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Message.js~Message#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": ": message to be stored in object"
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/core/Param.js",
    "content": "export default class Param {\n\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/Param.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Param",
    "memberof": "src/core/Param.js",
    "static": true,
    "longname": "src/core/Param.js~Param",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/Param.js",
    "importStyle": "Param",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/core/Service.js",
    "content": "import ServiceResponse from './ServiceResponse'\nimport ServiceRequest from './ServiceRequest'\n\nconst EventEmitter2 = require('eventemitter2')\n/**\n * A JS Service Client\n *\n */\nexport default class Service extends EventEmitter2 {\n    /**\n     * @constructor\n     * @param {Object} - possible keys include\n     *  * ws - the MRPTLib.WS connection handle\n     *  * name - the service name, like Playlist.GetItems\n     *  * serviceType (optional)\n     */\n    constructor({ws=null,name=null,serviceType = null}={}) {\n      super();\n      this.ws = ws;\n      this.name = name;\n      this.serviceType = serviceType;\n\n      this._serviceCallback = null;\n    }\n    /**\n     * Calls the service. Returns the service response in the\n     * callback.\n     *\n     * @param request - the MRPTLIB.ServiceRequest to send\n     * @param callback - function with paramsL:\n     *    *response - the response from the service request\n     * @param failedCallback - the callback function when the service call failed (optiona). Params:\n     *    * error - the error message reported by server\n     */\n    callService(request, callback, failedCallback) {\n      const serviceCallId = `call_service:${this.name}:${++this.ws.idCounter}`;\n\n      if(callback || failedCallback) {\n        this.ws.once(serviceCallId, (message)=>{\n          if (message.result !== undefined && message.result === false) {\n            if (typeof failedCallback === 'function') {\n              failedCallback(message.result);\n            }\n          } else if (typeof callback === 'function') {\n            callback(message.result); // No Service Response used as it does not support Array\n          }\n        });\n      }\n\n      const call = {\n        op : this.name,\n        id : serviceCallId,\n        v : this.ws.version,\n        params : request\n      };\n      this.ws.callOnConnection(call);\n    }\n\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/Service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "EventEmitter2",
    "memberof": "src/core/Service.js",
    "static": true,
    "longname": "src/core/Service.js~EventEmitter2",
    "access": "public",
    "export": false,
    "importPath": "mrpt-web-js/src/core/Service.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Service",
    "memberof": "src/core/Service.js",
    "static": true,
    "longname": "src/core/Service.js~Service",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/Service.js",
    "importStyle": "Service",
    "description": "A JS Service Client",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "EventEmitter2"
    ]
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Service.js~Service#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "possible keys include\n * ws - the MRPTLib.WS connection handle\n * name - the service name, like Playlist.GetItems\n * serviceType (optional)"
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "ws",
    "memberof": "src/core/Service.js~Service",
    "static": false,
    "longname": "src/core/Service.js~Service#ws",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "name",
    "memberof": "src/core/Service.js~Service",
    "static": false,
    "longname": "src/core/Service.js~Service#name",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "serviceType",
    "memberof": "src/core/Service.js~Service",
    "static": false,
    "longname": "src/core/Service.js~Service#serviceType",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_serviceCallback",
    "memberof": "src/core/Service.js~Service",
    "static": false,
    "longname": "src/core/Service.js~Service#_serviceCallback",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "callService",
    "memberof": "src/core/Service.js~Service",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Service.js~Service#callService",
    "access": "public",
    "description": "Calls the service. Returns the service response in the\ncallback.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the MRPTLIB.ServiceRequest to send"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function with paramsL:\n   *response - the response from the service request"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "failedCallback",
        "description": "the callback function when the service call failed (optiona). Params:\n   * error - the error message reported by server"
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/core/ServiceRequest.js",
    "content": "/**\n * A ServiceRequest is passed into the service call.\n */\nexport default class ServiceRequest {\n  /**\n   * @constructor\n   * @param {Object} values - matching the fields defined in the RPC.\n   */\n  constructor(values) {\n    Object.assign(this, values);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/ServiceRequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "class",
    "name": "ServiceRequest",
    "memberof": "src/core/ServiceRequest.js",
    "static": true,
    "longname": "src/core/ServiceRequest.js~ServiceRequest",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/ServiceRequest.js",
    "importStyle": "ServiceRequest",
    "description": "A ServiceRequest is passed into the service call.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/ServiceRequest.js~ServiceRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ServiceRequest.js~ServiceRequest#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "matching the fields defined in the RPC."
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/core/ServiceResponse.js",
    "content": "/**\n * A ServiceResponse is returned from the service call.\n *\n */\nexport default class ServiceReponse {\n  /**\n   * @constructor\n   * @param {Object} values - matching the fiels defined in the RPC.\n   */\n  constructor(values) {\n    Object.assign(this, values);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/ServiceResponse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "ServiceReponse",
    "memberof": "src/core/ServiceResponse.js",
    "static": true,
    "longname": "src/core/ServiceResponse.js~ServiceReponse",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/ServiceResponse.js",
    "importStyle": "ServiceReponse",
    "description": "A ServiceResponse is returned from the service call.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/ServiceResponse.js~ServiceReponse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ServiceResponse.js~ServiceReponse#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "matching the fiels defined in the RPC."
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/core/Topic.js",
    "content": "import Message from './Message'\n\nconst EventEmitter2 = require('eventemitter2').EventEmitter2\n/**\n * Publish and/or subscribe to a topic in mrpt-web server.\n *\n * Emits the following events:\n *  * 'warning' - if there are any warning during the Topic creation\n *  * 'message' - the message data from server\n */\nexport default class Topic extends EventEmitter2 {\n  /**\n   * @constructor\n   * @param {Object} - object with the following keys\n   *  * ws - the MRPTLIB.WS connection handle\n   *  * name - the topic name, like /cmd_vel\n   *  * messageType - the message type, like 'std_msgs/String'\n   *  * compression - the type of compression to use, like 'png'\n   *  * throttle_rate - the rate (in ms in between messages) at which to throttle the topics\n   *  * queue_size - the queue created at server side used when subscribing (defaults to 100).\n   *  * latch - latch the topic when publishing\n   *  * queue_length - the queue legth at server side used when subscribing (defaults to true)\n   *  * reconnect_on_close - the flag to enable resubscription and readvertisement on close event(defaults to true).\n   */\n  constructor({\n    ws,\n    name,\n    messageType,\n    isAdvertised = false,\n    compression = 'none',\n    throttle_rate = 0,\n    latch = false,\n    queue_size = 100,\n    queue_length = 0,\n    reconnect_on_close = true\n  }) {\n    super();\n    this.ws = ws;\n    this.name = name;\n    this.messageType = messageType;\n    this.isAdvertised = isAdvertised;\n    this.compression = compression;\n    this.throttle_rate = throttle_rate;\n    this.latch = latch;\n    this.queue_length = queue_length;\n    this.queue_size = queue_size;\n    this.reconnect_on_close = reconnect_on_close;\n\n    // Check for valid compression type\n    // Currently no compression is supported\n    if (this.compression && this.compression !== 'none') {\n      this.emit('warning', this.compression +\n      'compression is not supported. No compression will be used');\n    }\n\n    // Check if the throttle rate is negative\n    if (this.throttle_rate < 0) {\n      this.emit('warning', this.throttle_rate + 'is not allowed. Set to 0.');\n      this.throttle_rate = 0;\n    }\n\n    const that = this;\n    if(this.reconnect_on_close) {\n      this.callForSubscribeAndAdvertise = function(message) {\n        that.ws.callOnConnection(message);\n\n        that.waitForReconnect = false;\n        that.reconnectFunc = function() {\n          if(!that.waitForReconnect) {\n            that.waitForReconnect = true;\n            that.ws.callOnConnection(message);\n            that.ws.once('connection', function() {\n              that.waitForReconnect = false;\n            });\n          }\n        };\n        that.ws.on('close', that.reconnectFunc);\n      };\n    }\n    else {\n      this.callForSubscribeAndAdvertise = this.ws.callOnConnection;\n    }\n\n    this._messsageCallback = function(data) {\n      that.emit('message', new Message(data));\n    };\n  }\n  /**\n   * Eveerytime a message is published for the given topic, the callback\n   * will be called with the message object\n   *\n   * @param callback - function with the following params:\n   *  * message - the published message\n   */\n  subscribe(callback) {\n    if (typeof callback === 'function') {\n      this.on('message',callback);\n    }\n\n    if(this.subscribeId) { return; }\n    this.ws.on(this.name, this._messsageCallback);\n    this.subscribeId = `subscribe:${this.name}:${++this.ws.idCounter}`;\n\n    this.callForSubscribeAndAdvertise({\n      op: 'Subscriber.subscribe',\n      id: this.subscribeId,\n      v: this.ws.version,\n      params: {\n        type: this.messageType,\n        topic: this.name,\n        compression: this.compression,\n        throttle_rate: this.throttle_rate,\n        queue_length: this.queue_length\n      }\n    });\n  }\n  /**\n   * Unregisters as a subscriber for the topic. Unsubscribing stop remove\n   * all subscribe callbacks. To remove a callback, you must explicitly\n   * pass the callback function in.\n   *\n   * @param callback - the optional callback to unregister, if\n   *  * provided and other listeners are registered the topic won't\n   *  * unsubscribe, just stop emitting to the passed listener\n   */\n  unsubscribe(callback) {\n    if (callback) {\n      this.off('message', callback);\n      // If there is any other callbacks still subscribed don't\n      // unsubscribe\n      if(this.listeners('message').length) { return; }\n    }\n    if (!this.subscribeId) { return; }\n    // Note: Don't call this.removeAllListeners, allow client to handle that themselves\n    this.ws.off(this.name, this._messsageCallback);\n    if(this.reconnect_on_close) {\n      this.ws.off('close', this.reconnectFunc);\n    }\n    this.emit('unsubscribe');\n    this.ws.callOnConnection({\n      op: 'Subscriber.unsubscribe',\n      id: this.subscribeId,\n      v: this.ws.version,\n      params:{\n        topic: this.name\n      }\n    });\n    this.subscribeId = null;\n  }\n  /**\n   * Registers as a publisher for the topic.\n   */\n  advertise() {\n    if (this.isAdvertised) {\n      return;\n    }\n    this.advertiseId = `advertise:${this.name}:${++this.ws.idCounter}`;\n    this.callForSubscribeAndAdvertise({\n      op: 'Publisher.advertise',\n      id: this.advertiseId,\n      params:\n      {\n        type: this.messageType,\n        topic: this.name,\n        latch: this.latch,\n        queue_size: this.queue_size\n      }\n    });\n    this.isAdvertised = true;\n\n    if(!this.reconnect_on_close) {\n      const that = this;\n      this.ws.on('close', function() {\n        that.isAdvertised = false;\n      });\n    }\n  }\n  /**\n   * Unregisters as a publisher for the topic\n   */\n  unadvertise() {\n    if(!this.isAdvertised) {\n      return;\n    }\n    if(this.reconnect_on_close) {\n      this.ws.off('close', this.reconnectFunc);\n    }\n    this.emit('unadvertise');\n    this.ws.callOnConnection({\n      op: 'Publisher.unadvertise',\n      id: this.advertiseId,\n      params: {\n        topic: this.name\n      }\n    });\n    this.isAdvertised = false;\n  }\n  /**\n   * Publish the message.\n   *\n   * @param message - A MRPTLIB.Message object\n   */\n  publish(message) {\n    if(!this.isAdvertised) {\n      this.advertise();\n    }\n\n    const call = {\n      op : 'Publish',\n      id : `publish:${this.name}:${++this.ws.idCounter}`,\n      v : this.ws.version,\n      params : {\n        topic : this.name,\n        message : message,\n        latch : this.latch\n      }\n    };\n    this.ws.callOnConnection(call);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/Topic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "EventEmitter2",
    "memberof": "src/core/Topic.js",
    "static": true,
    "longname": "src/core/Topic.js~EventEmitter2",
    "access": "public",
    "export": false,
    "importPath": "mrpt-web-js/src/core/Topic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Topic",
    "memberof": "src/core/Topic.js",
    "static": true,
    "longname": "src/core/Topic.js~Topic",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/Topic.js",
    "importStyle": "Topic",
    "description": "Publish and/or subscribe to a topic in mrpt-web server.\n\nEmits the following events:\n * 'warning' - if there are any warning during the Topic creation\n * 'message' - the message data from server",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "EventEmitter2"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Topic.js~Topic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Topic.js~Topic#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "object with the following keys\n * ws - the MRPTLIB.WS connection handle\n * name - the topic name, like /cmd_vel\n * messageType - the message type, like 'std_msgs/String'\n * compression - the type of compression to use, like 'png'\n * throttle_rate - the rate (in ms in between messages) at which to throttle the topics\n * queue_size - the queue created at server side used when subscribing (defaults to 100).\n * latch - latch the topic when publishing\n * queue_length - the queue legth at server side used when subscribing (defaults to true)\n * reconnect_on_close - the flag to enable resubscription and readvertisement on close event(defaults to true)."
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "ws",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#ws",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "name",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#name",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "messageType",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#messageType",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "isAdvertised",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#isAdvertised",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "compression",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#compression",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "throttle_rate",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#throttle_rate",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "latch",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#latch",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "queue_length",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#queue_length",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "queue_size",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#queue_size",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "reconnect_on_close",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#reconnect_on_close",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "callForSubscribeAndAdvertise",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#callForSubscribeAndAdvertise",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/core/Topic.js~Topic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Topic.js~Topic#subscribe",
    "access": "public",
    "description": "Eveerytime a message is published for the given topic, the callback\nwill be called with the message object",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function with the following params:\n * message - the published message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "subscribeId",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#subscribeId",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "unsubscribe",
    "memberof": "src/core/Topic.js~Topic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Topic.js~Topic#unsubscribe",
    "access": "public",
    "description": "Unregisters as a subscriber for the topic. Unsubscribing stop remove\nall subscribe callbacks. To remove a callback, you must explicitly\npass the callback function in.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the optional callback to unregister, if\n * provided and other listeners are registered the topic won't\n * unsubscribe, just stop emitting to the passed listener"
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "advertise",
    "memberof": "src/core/Topic.js~Topic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Topic.js~Topic#advertise",
    "access": "public",
    "description": "Registers as a publisher for the topic.",
    "lineNumber": 153,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "advertiseId",
    "memberof": "src/core/Topic.js~Topic",
    "static": false,
    "longname": "src/core/Topic.js~Topic#advertiseId",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "unadvertise",
    "memberof": "src/core/Topic.js~Topic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Topic.js~Topic#unadvertise",
    "access": "public",
    "description": "Unregisters as a publisher for the topic",
    "lineNumber": 181,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "publish",
    "memberof": "src/core/Topic.js~Topic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Topic.js~Topic#publish",
    "access": "public",
    "description": "Publish the message.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "A MRPTLIB.Message object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/core/WS.js",
    "content": "import SocketAdapter from './socketAdapter'\nimport Service from './Service'\nimport ServiceRequest from './ServiceRequest'\nimport WebSocket from 'ws'\nimport {EventEmitter2} from 'eventemitter2'\n\nexport default class WS extends EventEmitter2 {\n    /**\n     * @constructor\n     * @param {string} url\n     */\n    constructor({url = null, version = \"1.0\", transportLibrary = \"websocket\", transportOptions = {}} = {}) {\n        super();\n        console.log(\"Setting up the webconnection...\");\n        this.socket = null;\n        this.idCounter = 0;\n        this.isConnected = false;\n        this.version = version;\n        this.transportLibrary = transportLibrary;\n        this.transportOptions = transportOptions;\n        //Sets unlimited event listeners\n        this.setMaxListeners(0);\n\n        // check if the url was given\n        // connect if true\n        if(url) {\n            this.connect(url);\n        }\n    }\n    /**\n     * Connect to the specified WebSocket.\n     *\n     * @param {string} url - WebSocket URL label\n     */\n    connect(url) {\n        this.socket = Object.assign(new WebSocket(url), SocketAdapter.socketAdapter(this));\n        if (this.socket.readyState !== 'undefined' && this.socket.readyState === 1)\n        {\n          console.log(\"here\");\n          this.isConnected = true;\n        }\n    }\n    /**\n     * Alternate to connect this takes a socket\n     * and keeps the reference in the class for making\n     * different calls. Only native websocket is supported.\n     * @param {WebSocket} $socket\n     */\n    wrap($socket) {\n      this.socket = Object.assign($socket, SocketAdapter.socketAdapter(this));\n      if (this.socket.readyState !== 'undefined' && this.socket.readyState === 1)\n      {\n        this.isConnected = true;\n      }\n    }\n    /**\n     * Disconnect from the webserver\n     */\n    close() {\n      if(this.socket) {\n        this.socket.close();\n      }\n    }\n    /**\n     * Sends the message over the WebSocket, but queues the\n     * message if not yet connected\n     * @param {object} message\n     */\n    callOnConnection(message) {\n      var that  = this;\n      var messageJson = JSON.stringify(message);\n      var emitter = (msg)=>that.socket.send(msg);\n\n      if(!this.isConnected) {\n        that.once('connection',()=>emitter(messageJson));\n      }\n      else {\n        emitter(messageJson);\n      }\n    }\n    /**\n     * Retrieves the list of topics being published\n     * on the Server machine\n     *\n     * @param {function} callback - success return the topics\n     * @param {function} failedCallback - failure pass the message\n    */\n    getTopics(callback, failedCallback) {\n        let result, message;\n        callback(result);\n        failedCallback(message);\n    }\n    /**\n     * Retrieves the details of the specific topic.\n     *\n     * @param {string} topic - topic for which details reqd.\n     * @param {function} callback - success\n     *                         return the topic details\n     * @param {function} failedCallback - failure\n     *                         return the failure message\n     */\n    getTopicDetails(topic, callback, failedCallback) {\n        let result, message;\n        callback(result);\n        failedCallback(message);\n    }\n    /**\n     * Retrieves the list of services being published\n     * on the Server machine\n     *\n     * @param {function} callback - success return the servicess\n     * @param {function} failedCallback - failure pass the message\n    */\n    getServices(callback, failedCallback) {\n        let result, message;\n        callback(result);\n        failedCallback(message);\n    }\n    /**\n     * Retrieves the details of the specific service.\n     *\n     * @param {string} service - service for which details reqd.\n     * @param {function} callback - success\n     *                         return the service details\n     * @param {function} failedCallback - failure\n     *                         return the failure message\n     */\n    getServiceDetails(service, callback, failedCallback) {\n        let result, message;\n        callback(result);\n        failedCallback(message);\n    }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/WS.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "WS",
    "memberof": "src/core/WS.js",
    "static": true,
    "longname": "src/core/WS.js~WS",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/core/WS.js",
    "importStyle": "WS",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "eventemitter2~EventEmitter2"
    ]
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "socket",
    "memberof": "src/core/WS.js~WS",
    "static": false,
    "longname": "src/core/WS.js~WS#socket",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "idCounter",
    "memberof": "src/core/WS.js~WS",
    "static": false,
    "longname": "src/core/WS.js~WS#idCounter",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "isConnected",
    "memberof": "src/core/WS.js~WS",
    "static": false,
    "longname": "src/core/WS.js~WS#isConnected",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "version",
    "memberof": "src/core/WS.js~WS",
    "static": false,
    "longname": "src/core/WS.js~WS#version",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "transportLibrary",
    "memberof": "src/core/WS.js~WS",
    "static": false,
    "longname": "src/core/WS.js~WS#transportLibrary",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "transportOptions",
    "memberof": "src/core/WS.js~WS",
    "static": false,
    "longname": "src/core/WS.js~WS#transportOptions",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "connect",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#connect",
    "access": "public",
    "description": "Connect to the specified WebSocket.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "WebSocket URL label"
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "wrap",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#wrap",
    "access": "public",
    "description": "Alternate to connect this takes a socket\nand keeps the reference in the class for making\ndifferent calls. Only native websocket is supported.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "$socket",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "close",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#close",
    "access": "public",
    "description": "Disconnect from the webserver",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "callOnConnection",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#callOnConnection",
    "access": "public",
    "description": "Sends the message over the WebSocket, but queues the\nmessage if not yet connected",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getTopics",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#getTopics",
    "access": "public",
    "description": "Retrieves the list of topics being published\non the Server machine",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "success return the topics"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "failedCallback",
        "description": "failure pass the message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getTopicDetails",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#getTopicDetails",
    "access": "public",
    "description": "Retrieves the details of the specific topic.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "topic",
        "description": "topic for which details reqd."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "success\n                        return the topic details"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "failedCallback",
        "description": "failure\n                        return the failure message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getServices",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#getServices",
    "access": "public",
    "description": "Retrieves the list of services being published\non the Server machine",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "success return the servicess"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "failedCallback",
        "description": "failure pass the message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getServiceDetails",
    "memberof": "src/core/WS.js~WS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/WS.js~WS#getServiceDetails",
    "access": "public",
    "description": "Retrieves the details of the specific service.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "service",
        "description": "service for which details reqd."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "success\n                        return the service details"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "failedCallback",
        "description": "failure\n                        return the failure message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/core/index.js",
    "content": "import WS from './WS';\nimport Topic from './Topic';\nimport Message from './Message';\nimport Param from './Param'\nimport Service from './Service';\nimport ServiceRequest from './ServiceRequest';\nimport ServiceResponse from './ServiceResponse';\nexport {\n    WS,\n    Topic,\n    Message,\n    Param,\n    Service,\n    ServiceRequest,\n    ServiceResponse\n};\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/core/socketAdapter.js",
    "content": "import WebSocket from 'ws'\n/**\n * Events listener for a WebSocket to a JS Client.\n * Sets up Messages for a given topic to trigger\n * an event on JS client.\n * @namespace socketAdapter\n * @private\n */\nexport default class SocketAdapter{\n  static socketAdapter(client) {\n    /**\n     * Handles the incoming json object according\n     * to the op code.\n     * The op code determines the action the incoming\n     * message wants to perform on the JS client.\n     * @param {Object} message\n     */\n    function handleMessage(message) {\n      if (message.op === 'publish') {\n        client.emit(message.topic, message.msg);\n      } else if (message.op === 'service_response') {\n        client.emit(message.id, message);\n      } else if (message.op === 'call_service') {\n        client.emit(message.service, message);\n      } else if (message.op === 'status') {\n        if(message.id) {\n          client.emit(`status:${message.id}`, message);\n        } else {\n          client.emit('status',message);\n        }\n      }\n    }\n    /**\n     * Checks and converts binary data to necessary format\n     * if needed, then passes data to the callback\n     * @param {Object} message\n     * @param {Function} callback\n     */\n    function handleData(message, callback) {\n      if (message.op === '#some particular blob type') {\n\n      } else {\n        callback(message);\n      }\n    }\n    return {\n      /**\n       * Emits a 'connection' event on WebSocket connection.\n       *\n       * @param event - the argument to emit with the event\n       * @memberof socketAdapter\n       */\n      onopen(event) {\n        client.isConnected = true;\n        client.emit('connection',event);\n      },\n\n      /**\n       * Emits a 'close' event on WebSocket disconnection.\n       *\n       * @param event - the argument to emit with the event\n       * @memberof socketAdapter\n       */\n      onclose(event) {\n        client.isConnected = false;\n        client.emit('close', event);\n      },\n\n      /**\n       * Emits an 'error' event whenever there was an error.\n       *\n       * @param event - the argument to emit with the event\n       * @memberof SocketAdapter\n       */\n      onerror(event) {\n        client.emit('emit', event);\n      },\n\n      /**\n       * Parses message responses from server and sends to the\n       * appropriate topic, service, or param.\n       *\n       * @param message - the raw JSON message from server.\n       * @memberof socketAdapter\n       */\n      onmessage(data) {\n        if(typeof Blob !== 'undefined' && data.data instanceof Blob) {\n          /**\n           * To be Added Blob decode code\n           */\n          const message = data;\n          handleData(message, handleMessage);\n        } else {\n          const message = JSON.parse(typeof data === 'string' ? data : data.data);\n          handleData(message, handleMessage);\n        }\n      }\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/core/socketAdapter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "SocketAdapter",
    "memberof": "src/core/socketAdapter.js",
    "static": true,
    "longname": "src/core/socketAdapter.js~SocketAdapter",
    "access": "private",
    "export": true,
    "importPath": "mrpt-web-js/src/core/socketAdapter.js",
    "importStyle": "SocketAdapter",
    "description": "Events listener for a WebSocket to a JS Client.\nSets up Messages for a given topic to trigger\nan event on JS client.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": "socketAdapter"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "socketAdapter",
    "memberof": "src/core/socketAdapter.js~SocketAdapter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/socketAdapter.js~SocketAdapter.socketAdapter",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"onopen\": function, \"onclose\": function, \"onerror\": function, \"onmessage\": function}"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/math/Pose.js",
    "content": "import Vector3 from './Vector3'\nimport Quaternion from './Quaternion'\n\n/**\n * A Pose in 3D space, Values are copied into this object.\n */\nexport default class Pose {\n  /**\n   * @constructor\n   * @param {Object} - keys include a Vector3 and Quaternion obj params\n   */\n  constructor({position = {}, orientation = {}} = {}) {\n    this.position = new Vector3(position);\n    this.orientation = new Quaternion(orientation);\n  }\n  /**\n   * Apply a transform against this pose.\n   *\n   * @param tf the transform\n   */\n  applyTransform(tf) {\n    position.multiplyQuaternion(tf.rotation);\n    position.add(tf.translation);\n    let tmp = tf.rotation.clone();\n    tmp.multiply(this.orientation);\n    this.orientation = tmp;\n  }\n  /**\n   * Clone a copy of this pose\n   *\n   * @returns the cloned pose\n   */\n  clone() {\n    return new Pose(this);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/math/Pose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "Pose",
    "memberof": "src/math/Pose.js",
    "static": true,
    "longname": "src/math/Pose.js~Pose",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/math/Pose.js",
    "importStyle": "Pose",
    "description": "A Pose in 3D space, Values are copied into this object.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Pose.js~Pose",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Pose.js~Pose#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "keys include a Vector3 and Quaternion obj params"
      }
    ]
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "position",
    "memberof": "src/math/Pose.js~Pose",
    "static": false,
    "longname": "src/math/Pose.js~Pose#position",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "orientation",
    "memberof": "src/math/Pose.js~Pose",
    "static": false,
    "longname": "src/math/Pose.js~Pose#orientation",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "applyTransform",
    "memberof": "src/math/Pose.js~Pose",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Pose.js~Pose#applyTransform",
    "access": "public",
    "description": "Apply a transform against this pose.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tf",
        "description": "the transform"
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Pose.js~Pose",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Pose.js~Pose#clone",
    "access": "public",
    "description": "Clone a copy of this pose",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "the cloned pose"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the cloned pose"
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/math/Quaternion.js",
    "content": "/**\n * A Quaternion.\n */\n /**  @constructor\n *  @param options - object with following keys:\n *   * x - the x value\n *   * y - the y value\n *   * z - the z value\n *   * w - the w value\n */\nexport default class Quaternion {\n  /**\n   * @constructor\n   * @param {Object} - keys include x, y, z, w\n   */\n  constructor({x = 0, y = 0, z = 0, w = 1} = {}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = (typeof w === 'number') ? w : 1;\n  }\n\n  /**\n   * Perform a conjugation on this quaternion.\n   */\n  conjugate() {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n  }\n\n  /**\n   * Return the norm of this quaternion.\n   */\n  norm() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  }\n\n  /**\n   * Perform a normalization on this quaternion.\n   */\n  normalize() {\n    var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 1;\n    } else {\n      l = 1 / l;\n      this.x = this.x * l;\n      this.y = this.y * l;\n      this.z = this.z * l;\n      this.w = this.w * l;\n    }\n  }\n\n  /**\n   * Convert this quaternion into its inverse.\n   */\n  invert() {\n    this.conjugate();\n    this.normalize();\n  }\n\n  /**\n   * Set the values of this quaternion to the product of itself and the given quaternion.\n   *\n   * @param q the quaternion to multiply with\n   */\n  multiply(q) {\n    var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\n    var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\n    var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\n    var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\n    this.x = newX;\n    this.y = newY;\n    this.z = newZ;\n    this.w = newW;\n  }\n\n  /**\n   * Clone a copy of this quaternion.\n   *\n   * @returns the cloned quaternion\n   */\n  clone() {\n    return new Quaternion(this);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/math/Quaternion.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "class",
    "name": "Quaternion",
    "memberof": "src/math/Quaternion.js",
    "static": true,
    "longname": "src/math/Quaternion.js~Quaternion",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/math/Quaternion.js",
    "importStyle": "Quaternion",
    "description": " @constructor",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "object with following keys:\n  * x - the x value\n  * y - the y value\n  * z - the z value\n  * w - the w value"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "keys include x, y, z, w"
      }
    ]
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#x",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "y",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#y",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "z",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#z",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "w",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#w",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "conjugate",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#conjugate",
    "access": "public",
    "description": "Perform a conjugation on this quaternion.",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#norm",
    "access": "public",
    "description": "Return the norm of this quaternion.",
    "lineNumber": 35,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#normalize",
    "access": "public",
    "description": "Perform a normalization on this quaternion.",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "invert",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#invert",
    "access": "public",
    "description": "Convert this quaternion into its inverse.",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#multiply",
    "access": "public",
    "description": "Set the values of this quaternion to the product of itself and the given quaternion.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "the quaternion to multiply with"
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Quaternion.js~Quaternion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Quaternion.js~Quaternion#clone",
    "access": "public",
    "description": "Clone a copy of this quaternion.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "the cloned quaternion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the cloned quaternion"
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/math/Transform.js",
    "content": "import Vector3 from './Vector3'\nimport Quaternion from './Quaternion'\n/**\n * A Transform in 3-space. Values are copied into this object\n */\nexport default class Transform {\n  /**\n  * @constructor\n  * @param {Object} - with following keys:\n  *  * translation - the Vector3 describing the translation\n  *  * rotation - the MRPTLIB.Quaternion describing the rotation\n  */\n  constructor({translation = {}, rotation = {}} = {}) {\n    this.translation = new Vector3(translation);\n    this.rotation = new Quaternion(rotation);\n  }\n  /**\n   * Clone a copy of this transform\n   *\n   * @returns the cloned transform\n   */\n  clone() {\n    return new Transform(this);\n  }\n}\n\n\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/math/Transform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "Transform",
    "memberof": "src/math/Transform.js",
    "static": true,
    "longname": "src/math/Transform.js~Transform",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/math/Transform.js",
    "importStyle": "Transform",
    "description": "A Transform in 3-space. Values are copied into this object",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Transform.js~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Transform.js~Transform#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "with following keys:\n * translation - the Vector3 describing the translation\n * rotation - the MRPTLIB.Quaternion describing the rotation"
      }
    ]
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "translation",
    "memberof": "src/math/Transform.js~Transform",
    "static": false,
    "longname": "src/math/Transform.js~Transform#translation",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "rotation",
    "memberof": "src/math/Transform.js~Transform",
    "static": false,
    "longname": "src/math/Transform.js~Transform#rotation",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Transform.js~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Transform.js~Transform#clone",
    "access": "public",
    "description": "Clone a copy of this transform",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "the cloned transform"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the cloned transform"
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/math/Vector3.js",
    "content": "/**\n * A 3D vector.\n */\nexport default class Vector3 {\n  /**\n   * @constructor\n   * @param {Object} - with default keys x,y,z\n   */\n  constructor({x = 0, y = 0, z = 0} = {}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Set the values of this vector to the sum of itself\n   * and the given vector\n   *\n   * @param v the vector to add with\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n  /**\n   * Multiply the given Quaternion with this vector.\n   *\n   * @param q - the quaternion to multiply with\n   */\n  multiplyQuaternion(q) {\n    var ix = q.w * this.x + q.y * this.z - q.z * this.y;\n    var iy = q.w * this.y + q.z * this.x - q.x * this.z;\n    var iz = q.w * this.z + q.x * this.y - q.y * this.x;\n    var iw = -q.x * this.x - q.y * this.y - q.z * this.z;\n    this.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    this.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    this.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n  }\n  /**\n   * Clone a copy of this vector\n   *\n   * @returns the cloned vector\n   */\n  clone() {\n    return new Vector3(this);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/math/Vector3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "Vector3",
    "memberof": "src/math/Vector3.js",
    "static": true,
    "longname": "src/math/Vector3.js~Vector3",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/math/Vector3.js",
    "importStyle": "Vector3",
    "description": "A 3D vector.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Vector3.js~Vector3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "with default keys x,y,z"
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/Vector3.js~Vector3",
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#x",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "y",
    "memberof": "src/math/Vector3.js~Vector3",
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#y",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "z",
    "memberof": "src/math/Vector3.js~Vector3",
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#z",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/Vector3.js~Vector3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#add",
    "access": "public",
    "description": "Set the values of this vector to the sum of itself\nand the given vector",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "the vector to add with"
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "multiplyQuaternion",
    "memberof": "src/math/Vector3.js~Vector3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#multiplyQuaternion",
    "access": "public",
    "description": "Multiply the given Quaternion with this vector.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "the quaternion to multiply with"
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Vector3.js~Vector3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Vector3.js~Vector3#clone",
    "access": "public",
    "description": "Clone a copy of this vector",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "the cloned vector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the cloned vector"
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/math/index.js",
    "content": "import Pose from './Pose'\nimport Quaternion from './Quaternion'\nimport Transform from './Transform'\nimport Vector3 from './Vector3'\nexport {\n    Pose,\n    Quaternion,\n    Transform,\n    Vector3\n};\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/math/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/meshes/index.js",
    "content": "import Scene from './scene/Scene'\nimport * as model from './model/index'\nimport * as material from './material/index'\nexport {\n  Scene,\n  model,\n  material\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/meshes/material/Material.js",
    "content": "import * as THREE from 'three'\nexport default class Material {\n  /**\n   * @constructor\n   */\n  constructor() {}\n  /**\n   *\n   * @param {float} r\n   * @param {float} g\n   * @param {float} b\n   * @param {float} a\n   * @returns The three material\n   */\n  static makeColorMaterial(r,g,b,a) {\n    let color = new THREE.Color();\n    color.setRGB(r, g, b);\n    if (a <= 0.99) {\n      return new THREE.MeshBasicMaterial({\n        color : color.getHex(),\n        opacity : a + 0.1,\n        transparent : true,\n        depthWrite : true,\n        blendSrc : THREE.SrcAlphaFactor,\n        blendDst : THREE.OneMinusSrcAlphaFactor,\n        blendEquation : THREE.ReverseSubtractEquation,\n        blending : THREE.NormalBlending\n      });\n    } else {\n      return new THREE.MeshPhongMaterial({\n        color : color.getHex(),\n        opacity : a,\n        blending : THREE.NormalBlending\n      });\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/material/Material.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "Material",
    "memberof": "src/meshes/material/Material.js",
    "static": true,
    "longname": "src/meshes/material/Material.js~Material",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/material/Material.js",
    "importStyle": "Material",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/material/Material.js~Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/material/Material.js~Material#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "makeColorMaterial",
    "memberof": "src/meshes/material/Material.js~Material",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/meshes/material/Material.js~Material.makeColorMaterial",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The three material"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The three material"
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/meshes/material/index.js",
    "content": "import Material from './Material'\nexport {\n  Material\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/material/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/meshes/model/Arrow.js",
    "content": "import * as THREE from 'three'\nexport default class Arrow extends THREE.Mesh {\n  /**\n   *\n   * @param {Object} options - with possible keys\n   * origin - arrow starting coords\n   * destination -arrow starting coords\n   * headRatio - the ratio of the head of the arrow to its entire length\n   * shaft radius - radius of the cylinder part of the arrow\n   * head radius - radius of the bottom of the cone part of the arrow\n   */\n  constructor(options = {}) {\n    let origin, destination, direction, headLength;\n    if(options.x0 === undefined || options.y0 === undefined || options.z0 === undefined)\n    {\n      origin = new THREE.Vector3(0, 0, 0);\n    }\n    else {\n      origin = new THREE.Vector3(options.x0, options.y0, options.z0);\n    }\n    if(options.x1 === undefined || options.y1 === undefined || options.z1 === undefined)\n    {\n      destination = new THREE.Vector3(1, 0, 0);\n    }\n    else {\n      destination = new THREE.Vector3(options.x1, options.y1, options.z1);\n    }\n\n    if(origin === destination) {\n      direction = new Vector3(1,0,0);\n      direction.normalize();\n    }\n    else {\n      direction = destination.clone().sub(origin);\n      direction.normalize();\n    }\n    if(options.headRatio){\n      headLength = options.headRatio * destination.clone.sub(origin).length();\n    }\n    else {\n      headLength = 0.2;\n    }\n    const shaftRadius = options.smallRadius || 0.025;\n    const headRadius = options.largeRadius || 0.05;\n    const shaftLength = destination.clone().sub(origin).length() - headLength;\n    let material = options.material || new THREE.MeshBasicMaterial({color: 0xff0000});\n    // create and merge the geometries\n    let geometry = new THREE.CylinderGeometry(shaftRadius, shaftRadius, shaftLength, 12, 1);\n    let m = new THREE.Matrix4();\n    m.setPosition(new THREE.Vector3(0, shaftLength*0.5, 0));\n    geometry.applyMatrix(m);\n\n    //create the head\n    let coneGeometry = new THREE.CylinderGeometry(0, headRadius, headLength, 12 , 1);\n    m.setPosition(new THREE.Vector3(0, shaftLength + (headLength * 0.5),0));\n    coneGeometry.applyMatrix(m);\n\n    //put the arrow together/\n    geometry.merge(coneGeometry);\n\n    super(geometry, material);\n    this.length = destination.clone().sub(origin).length();\n    this.setPosition(origin);\n    this.setDirection(direction);\n  }\n  /**\n   * Set the start position of the arrow\n   *\n   * @param {THREE.Vector3} origin\n   */\n  setPosition(origin) {\n    this.position.copy(origin);\n  }\n  /**\n   * Set the direction of this arrow to that of the given vector.\n   *\n   * @param direction - the direction to set this arrow\n   */\n  setDirection(direction) {\n    let axis = new THREE.Vector3(0, 1, 0).cross(direction);\n    let radians = Math.acos(new THREE.Vector3(0, 1, 0).dot(direction.clone().normalize()));\n    this.matrix = new THREE.Matrix4().makeRotationAxis(axis.normalize(), radians);\n    this.rotation.setFromRotationMatrix(this.matrix, this.rotation.order);\n  }\n  /**\n   * Set this arrow to be the given length.\n   *\n   * @param length - the new length of the arrow\n   */\n  setLength(length) {\n    if(this.length) {\n      this.scale.set(length/this.length, length/this.length, length/this.length);\n      this.length = length;\n    }\n  };\n\n  /**\n   * Set the color of this arrow to the given hex value.\n   *\n   * @param hex - the hex value of the color to use\n   */\n  setColor(hex) {\n    this.material.color.setHex(hex);\n  };\n\n  /*\n  * Free memory of elements in this marker.\n  */\n  dispose() {\n    if (this.geometry !== undefined) {\n        this.geometry.dispose();\n    }\n    if (this.material !== undefined) {\n        this.material.dispose();\n    }\n  };\n\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/Arrow.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "Arrow",
    "memberof": "src/meshes/model/Arrow.js",
    "static": true,
    "longname": "src/meshes/model/Arrow.js~Arrow",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/Arrow.js",
    "importStyle": "Arrow",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Mesh"
    ]
  },
  {
    "__docId__": 187,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with possible keys\norigin - arrow starting coords\ndestination -arrow starting coords\nheadRatio - the ratio of the head of the arrow to its entire length\nshaft radius - radius of the cylinder part of the arrow\nhead radius - radius of the bottom of the cone part of the arrow"
      }
    ]
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "length",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#length",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#setPosition",
    "access": "public",
    "description": "Set the start position of the arrow",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "setDirection",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#setDirection",
    "access": "public",
    "description": "Set the direction of this arrow to that of the given vector.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "the direction to set this arrow"
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "matrix",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#matrix",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "setLength",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#setLength",
    "access": "public",
    "description": "Set this arrow to be the given length.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "the new length of the arrow"
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#setColor",
    "access": "public",
    "description": "Set the color of this arrow to the given hex value.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "the hex value of the color to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/meshes/model/Arrow.js~Arrow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Arrow.js~Arrow#dispose",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/meshes/model/CCylinder.js",
    "content": "import * as THREE from 'three'\nexport default class CCylinder extends THREE.Mesh {\n  constructor(options = {}) {\n    const baseRadius = options.baseRadius || 1;\n    const topRadius = options.topRadius || 1;\n    const height = options.height || 1;\n    const slices = options.slices || 20;\n    const stacks = options.stacks || 10;\n    // only supports completely open ended\n    const hasBothBase = (options.hasBottomBase||true) & (options.hasTopBase||true);\n    let geom  = new THREE.CylinderGeometry(topRadius, baseRadius, height, slices, stacks,!hasBothBase);\n    let material = new THREE.MeshBasicMaterial({color: 0xffff00});\n    super(geom, material);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CCylinder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "CCylinder",
    "memberof": "src/meshes/model/CCylinder.js",
    "static": true,
    "longname": "src/meshes/model/CCylinder.js~CCylinder",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CCylinder.js",
    "importStyle": "CCylinder",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Mesh"
    ]
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CCylinder.js~CCylinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CCylinder.js~CCylinder#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/meshes/model/COccupancyGrid.js",
    "content": "import * as THREE from 'three'\nimport Pose from '../../math/Pose'\nexport default class COccupancyGrid extends THREE.Object3D {\n  /**\n   *\n   * @param {Object} options - with the following keys\n   * @param {float} resolution - the size of the grid cell\n   * @param {int} width - the number of columns\n   * @param {int} height - the number of rows\n   * @param {int} range - the range of values that the grid can have\n   * @param {Object{r,g,b}} color - the rgb value of the colors\n   * @param {Pose} pose - the pose of the origin of the map\n   */\n  constructor(options = {}) {\n    super();\n    const resolution = options.resolution || 0.05;\n    const width = options.width || 4;\n    const height = options.height || 4;\n    // 0 to 100 range\n    const data = options.data || [50,0,50,0,0,50,0,50,50,0,50,0,0,50,0,50];\n    let range = options.range || 100;\n    const baseColor = options.color || {r:255,g:255,b:255};\n    let pose;\n    if(options.pose === undefined) {\n      pose = new Pose(options.pose);\n    } else {\n      pose = new Pose();\n    }\n    let i = 0;\n    for ( let row = 0; row < height; row++) {\n      for ( let col = 0; col < width; col++) {\n        let mapI = (col + (height - row - 1) * width);\n        let val = data[mapI];\n        let color = new THREE.Color();\n        let tmp = 255*range;\n        color.setRGB((val * baseColor.r)/tmp, (val * baseColor.g)/tmp, (val * baseColor.b)/tmp);\n        let geom = new THREE.PlaneBufferGeometry(resolution,resolution);\n        let material = new THREE.MeshBasicMaterial({color: color, side: THREE.DoubleSide});\n        let cell = new THREE.Mesh( geom, material);\n        let m = new THREE.Matrix4();\n        m.setPosition(new THREE.Vector3());\n        // translate to required location\n        cell.position.copy(new THREE.Vector3(resolution/2 + resolution*col,resolution/2 + resolution*row,0));\n        this.add(cell);\n      }\n    }\n  }\n  /**\n   * setPosition\n   * @param x\n   * @param y\n   * @param z\n   */\n  setPosition(x = 0,y = 0,z = 0) {\n    this.position.copy(new THREE.Vector3(x,y,z));\n  }\n  /**\n   * setOrientation\n   * @param\n   */\n  setOrientation(x = 0,y = 0,z = 0,w = 1) {\n    this.orientation.copy(new THREE.Quaternion(x,y,z,w));\n  }\n  /**\n   * setFromPose\n   * @param {Pose}\n   */\n  setFromPose(pose) {\n    // TODO\n    throw \"Not Implemented yet.s\"\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/COccupancyGrid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "class",
    "name": "COccupancyGrid",
    "memberof": "src/meshes/model/COccupancyGrid.js",
    "static": true,
    "longname": "src/meshes/model/COccupancyGrid.js~COccupancyGrid",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/COccupancyGrid.js",
    "importStyle": "COccupancyGrid",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Object3D"
    ]
  },
  {
    "__docId__": 201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/COccupancyGrid.js~COccupancyGrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/COccupancyGrid.js~COccupancyGrid#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with the following keys"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": "the size of the grid cell"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "the number of columns"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "the number of rows"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "range",
        "description": "the range of values that the grid can have"
      },
      {
        "nullable": null,
        "types": [
          "Object{r,g,b}"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "the rgb value of the colors"
      },
      {
        "nullable": null,
        "types": [
          "Pose"
        ],
        "spread": false,
        "optional": false,
        "name": "pose",
        "description": "the pose of the origin of the map"
      }
    ]
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/COccupancyGrid.js~COccupancyGrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/COccupancyGrid.js~COccupancyGrid#setPosition",
    "access": "public",
    "description": "setPosition",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "setOrientation",
    "memberof": "src/meshes/model/COccupancyGrid.js~COccupancyGrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/COccupancyGrid.js~COccupancyGrid#setOrientation",
    "access": "public",
    "description": "setOrientation",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "setFromPose",
    "memberof": "src/meshes/model/COccupancyGrid.js~COccupancyGrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/COccupancyGrid.js~COccupancyGrid#setFromPose",
    "access": "public",
    "description": "setFromPose",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "src/meshes/model/CPlanarLaserScan.js",
    "content": "import * as THREE from 'three'\nexport default class CPlanarLaserScan extends THREE.Group {\n  /**\n   *\n   * @param {Object} options - with the following keys\n   * @param n - the number of points\n   * @param xs - array containing the x coords of points\n   * @param ys - arrau containing the y coords of points\n   * @param zs - array containing the z coords of points\n   * @param enable_line - boolean to enable line in the planar scan\n   * @param enable_points - boolean to enable points in the planar scan\n   * @param enable_surface - boolean to enable surface in the planar scan\n   * @param line_width - default: 1, set the line width\n   * @param points_width - default: 1, set the points width\n   * @param line_color - default: {r:1.0,g:0.0,b:0.0,a:0.5}, set the line color\n   * @param points_color - default: {r:1.0,g:0,b:0,a:1}, set the points color\n   * @param surface_color - default: {r:0.01,g:0.01,b:0.6,a:0.6}, set the surface color\n   *                        and transparency\n   */\n  constructor(options={}) {\n    super();\n    this.xs = options.xs || [];\n    this.ys = options.ys || [];\n    this.zs = options.zs || [];\n    this.n = Math.max(this.xs.length, this.ys.length, this.zs.length);\n    this.enable_line = true;\n    this.enable_points = true;\n    this.enable_surface = true;\n    this.line_width = 1;\n    this.points_width = 0.05;\n    this.line_color = {r:1.0,g:0.0,b:0.0,a:0.6};\n    this.points_color = {r:1.0,g:1,b:0,a:1};\n    this.surface_color = {r:0.01,g:0.01,b:0.6,a:0.3};\n    this.setConfiguration(options, false);\n    this.render();\n  }\n  /**\n   * The functions renders the planar scan\n   * based on the parameters and configurations currenltly\n   * set\n   */\n  render()\n  {\n    let n = this.n;\n    // LINES\n    if ( n > 1 && this.enable_line)\n    {\n      let geometry = new THREE.Geometry();\n      let color = new THREE.Color();\n      let c = this.line_color;\n      color.setRGB(c.r,c.g,c.b);\n      let material = new THREE.LineBasicMaterial({\n        color: color,\n        linewidth: this.line_width,\n      });\n      for (let i = 0; i < n; i++)\n      {\n        geometry.vertices.push(\n          new THREE.Vector3((this.xs[i] || 0), (this.ys[i] || 0), (this.zs[i] || 0))\n        );\n      }\n      if (this.line_scan !== undefined)\n      {\n        this.remove(this.line_scan);\n      }\n      this.line_scan = new THREE.Line(geometry, material);\n      this.add(this.line_scan);\n    }\n    // POINTS\n    if ( n > 0 && this.enable_points)\n    {\n      let geometry = new THREE.Geometry();\n      let color = new THREE.Color();\n      let c = this.points_color;\n      color.setRGB(c.r,c.g,c.b);\n      let material = new THREE.PointsMaterial({\n        color: color,\n        size: this.points_width,\n        opacity: this.points_color.a\n      });\n      for (let i = 0; i < n; i++)\n      {\n        geometry.vertices.push(\n          new THREE.Vector3((this.xs[i] || 0), (this.ys[i] || 0), (this.zs[i] || 0))\n        );\n      }\n      if (this.points_scan !== undefined)\n      {\n        this.remove(this.points_scan);\n      }\n      this.points_scan = new THREE.Points(geometry, material);\n      this.add(this.points_scan);\n    }\n    // SURFACE\n    if ( n > 2 && this.enable_surface)\n    {\n      let geometry = new THREE.Geometry();\n      let color = new THREE.Color();\n      let c = this.surface_color;\n      color.setRGB(c.r,c.g,c.b);\n      let material = new THREE.MeshBasicMaterial({\n        color: color,\n        opacity: this.surface_color.a\n      })\n      for (let i = 0; i < n; i++)\n      {\n        geometry.vertices.push(\n          new THREE.Vector3((this.xs[i] || 0), (this.ys[i] || 0), (this.zs[i] || 0))\n        );\n      }\n      geometry.vertices.push(\n        new THREE.Vector3((this.xs[0] || 0), (this.ys[0] || 0), (this.zs[0] || 0))\n      );\n      for (let i = 1; i < n-1; i++)\n      {\n        geometry.faces.push(new THREE.Face3(0, i, i+1));\n      }\n      // geometry.computeFaceNormals();\n      // geometry.computeVertexNormals();\n      if (this.surface_scan !== undefined)\n      {\n        this.remove(this.surface_scan);\n      }\n      this.surface_scan = new THREE.Mesh(geometry, material);\n      this.add(this.surface_scan);\n    }\n  }\n  /**\n   *\n   * @param {*} options  - options contain the parameters (points)\n   *    and configurations (line_width, points_color,enable_line)\n   * @param {boolean} isRender - default true,\n   *    will render the object after setting the options\n   * @param n - the number of points\n   * @param xs - array containing the x coords of points\n   * @param ys - arrau containing the y coords of points\n   * @param zs - array containing the z coords of points\n   */\n  setAll(options, isRender = true)\n  {\n    this.setParameters(options, false);\n    this.setConfiguration(options, false);\n    if (isRender) {\n      this.render();\n    }\n  }\n  /**\n   * @param {boolean} isRender - default true,\n   *    will render the object after setting the options\n   * @param {Object} options - with the following keys\n   *\n   */\n  setParameters(options, isRender = true)\n  {\n    this.xs = options.xs || [];\n    this.ys = options.ys || [];\n    this.zs = options.zs || [];\n    this.n = Math.max(this.xs.length, this.ys.length, this.zs.length);\n    console.log(\"n\",this.n, \"options\", options);\n    if (isRender) {\n      this.render();\n    }\n  }\n  /**\n   * @param {boolean} isRender - default true,\n   *    will render the object after setting the options\n   * @param {*} options - with the following keys\n   * @param enable_line - boolean to enable line in the planar scan\n   * @param enable_points - boolean to enable points in the planar scan\n   * @param enable_surface - boolean to enable surface in the planar scan\n   * @param line_width - default: 1, set the line width\n   * @param points_width - default: 1, set the points width\n   * @param line_color - default: {r:1.0,g:0.0,b:0.0,a:0.5}, set the line color\n   * @param points_color - default: {r:1.0,g:0,b:0,a:1}, set the points color\n   * @param surface_color - default: {r:0.01,g:0.01,b:0.6,a:0.6}, set the surface color\n   *                        and transparency\n   */\n  setConfiguration(options, isRender = true)\n  {\n    // color and width configurations with default values\n    if(options.enable_line !== undefined)\n    {\n      this.enable_line = options.enable_line;\n    }\n    if(options.enable_points !== undefined)\n    {\n      this.enable_points = options.enable_points;\n    }\n    if(options.enable_surface !== undefined)\n    {\n      this.enable_surface = options.enable_surface;\n    }\n    this.line_width = options.line_width || this.line_width;\n    this.points_width = options.points_width || this.points_width;\n    this.line_color = options.line_color || this.line_color;\n    this.points_color = options.points_color || this.points_color;\n    this.surface_color = options.surface_color || this.surface_color;\n    if (isRender) {\n      this.render();\n    }\n  }\n  /**\n   *\n   * @param {Object} message - with the following keys\n   * @param n - the number of points\n   * @param xs - array containing the x coords of points\n   * @param ys - arrau containing the y coords of points\n   * @param zs - array containing the z coords of points\n   * @param enable_line - boolean to enable line in the planar scan\n   * @param enable_points - boolean to enable points in the planar scan\n   * @param enable_surface - boolean to enable surface in the planar scan\n   * @param line_width - default: 1, set the line width\n   * @param points_width - default: 1, set the points width\n   * @param line_color - default: {r:1.0,g:0.0,b:0.0,a:0.5}, set the line color\n   * @param points_color - default: {r:1.0,g:0,b:0,a:1}, set the points color\n   * @param surface_color - default: {r:0.01,g:0.01,b:0.6,a:0.6}, set the surface color\n   *                        and transparency\n   * if n is set as negative then the arrays xs,ys,zs of the object\n   * remain unchanged\n   */\n  processMessage(message, isRender = true)\n  {\n    this.setAll(message, isRender);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CPlanarLaserScan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "CPlanarLaserScan",
    "memberof": "src/meshes/model/CPlanarLaserScan.js",
    "static": true,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CPlanarLaserScan.js",
    "importStyle": "CPlanarLaserScan",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Group"
    ]
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with the following keys"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "the number of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "array containing the x coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ys",
        "description": "arrau containing the y coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "zs",
        "description": "array containing the z coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_line",
        "description": "boolean to enable line in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_points",
        "description": "boolean to enable points in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_surface",
        "description": "boolean to enable surface in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "line_width",
        "description": "default: 1, set the line width"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points_width",
        "description": "default: 1, set the points width"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "line_color",
        "description": "default: {r:1.0,g:0.0,b:0.0,a:0.5}, set the line color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points_color",
        "description": "default: {r:1.0,g:0,b:0,a:1}, set the points color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "surface_color",
        "description": "default: {r:0.01,g:0.01,b:0.6,a:0.6}, set the surface color\n                       and transparency"
      }
    ]
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "xs",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#xs",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "ys",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#ys",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "zs",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#zs",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "n",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#n",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "enable_line",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#enable_line",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "enable_points",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#enable_points",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "enable_surface",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#enable_surface",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "line_width",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#line_width",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "points_width",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#points_width",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "line_color",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#line_color",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"r\": number, \"g\": *, \"b\": *, \"a\": number}"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "points_color",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#points_color",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"r\": number, \"g\": number, \"b\": *, \"a\": number}"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "surface_color",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#surface_color",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"r\": number, \"g\": number, \"b\": number, \"a\": number}"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "render",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#render",
    "access": "public",
    "description": "The functions renders the planar scan\nbased on the parameters and configurations currenltly\nset",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "line_scan",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#line_scan",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "points_scan",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#points_scan",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "surface_scan",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#surface_scan",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "setAll",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#setAll",
    "access": "public",
    "description": "",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options contain the parameters (points)\n   and configurations (line_width, points_color,enable_line)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isRender",
        "description": "default true,\n   will render the object after setting the options"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "the number of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "array containing the x coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ys",
        "description": "arrau containing the y coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "zs",
        "description": "array containing the z coords of points"
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "setParameters",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#setParameters",
    "access": "public",
    "description": "",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isRender",
        "description": "default true,\n   will render the object after setting the options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with the following keys"
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "setConfiguration",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#setConfiguration",
    "access": "public",
    "description": "",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isRender",
        "description": "default true,\n   will render the object after setting the options"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with the following keys"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_line",
        "description": "boolean to enable line in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_points",
        "description": "boolean to enable points in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_surface",
        "description": "boolean to enable surface in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "line_width",
        "description": "default: 1, set the line width"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points_width",
        "description": "default: 1, set the points width"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "line_color",
        "description": "default: {r:1.0,g:0.0,b:0.0,a:0.5}, set the line color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points_color",
        "description": "default: {r:1.0,g:0,b:0,a:1}, set the points color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "surface_color",
        "description": "default: {r:0.01,g:0.01,b:0.6,a:0.6}, set the surface color\n                       and transparency"
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "processMessage",
    "memberof": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPlanarLaserScan.js~CPlanarLaserScan#processMessage",
    "access": "public",
    "description": "",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "with the following keys"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "the number of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "array containing the x coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ys",
        "description": "arrau containing the y coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "zs",
        "description": "array containing the z coords of points"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_line",
        "description": "boolean to enable line in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_points",
        "description": "boolean to enable points in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable_surface",
        "description": "boolean to enable surface in the planar scan"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "line_width",
        "description": "default: 1, set the line width"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points_width",
        "description": "default: 1, set the points width"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "line_color",
        "description": "default: {r:1.0,g:0.0,b:0.0,a:0.5}, set the line color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points_color",
        "description": "default: {r:1.0,g:0,b:0,a:1}, set the points color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "surface_color",
        "description": "default: {r:0.01,g:0.01,b:0.6,a:0.6}, set the surface color\n                       and transparency\nif n is set as negative then the arrays xs,ys,zs of the object\nremain unchanged"
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/meshes/model/CPointCloud.js",
    "content": "import * as THREE from 'three'\nexport default class CPointCloud extends THREE.Points {\n  /**\n   * @constructor\n   * @param {Object} options - with the possible keys\n   * pointSize - the size of point in float\n   * xs {Array} - contains x coords of all the points\n   * ys {Array} - contains y coords of all the points\n   * zs {Array} - contains z coords of all the points\n   * colorFromDepth_min {R,G,B} -float values of RGB channels\n   * colorFromDepth_max {R,G,B} - float values of RGB channels\n   * pointSmooth {bool} - flag\n   *\n   */\n  constructor(options = {}) {\n    let pointSize = options.pointSize || 1.0;\n    let N = Math.min((options.xs.length || 0), (options.ys.length || 0),(options.zs.length || 0));\n    let xs = options.xs;\n    let ys = options.ys;\n    let zs = options.zs;\n    let color = new THREE.Color(0x00ff00);\n    let geom = new THREE.Geometry();\n    let material = new THREE.PointsMaterial({\n      size: pointSize,\n      color: color\n    });\n    for (let i = 0; i < N; i++) {\n      let particle = new THREE.Vector3(xs[i],ys[i],zs[i]);\n      geom.vertices.push(particle);\n      let particle_color = new THREE.Color(0x00ff00);\n      //TODO: change to gradient colors later\n      let hsl = {};\n      color.getHSL(hsl);\n      particle_color.setHSL(hsl.h, hsl.s, hsl.l);\n      geom.colors.push(particle_color);\n    }\n    super(geom, material);\n  }\n  /**\n   * Set the start position of the arrow\n   *\n   * @param {THREE.Vector3} origin\n   */\n  setPosition(origin) {\n    this.position.copy(origin);\n  }\n  /**\n   * scale equally in 3 directions\n   * @param {float} r\n   */\n  setSize(r) {\n    this.scale.set(r, r, r);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CPointCloud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "CPointCloud",
    "memberof": "src/meshes/model/CPointCloud.js",
    "static": true,
    "longname": "src/meshes/model/CPointCloud.js~CPointCloud",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CPointCloud.js",
    "importStyle": "CPointCloud",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Points"
    ]
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CPointCloud.js~CPointCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPointCloud.js~CPointCloud#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with the possible keys\npointSize - the size of point in float\nxs {Array} - contains x coords of all the points\nys {Array} - contains y coords of all the points\nzs {Array} - contains z coords of all the points\ncolorFromDepth_min {R,G,B} -float values of RGB channels\ncolorFromDepth_max {R,G,B} - float values of RGB channels\npointSmooth {bool} - flag"
      }
    ]
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/CPointCloud.js~CPointCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPointCloud.js~CPointCloud#setPosition",
    "access": "public",
    "description": "Set the start position of the arrow",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "setSize",
    "memberof": "src/meshes/model/CPointCloud.js~CPointCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPointCloud.js~CPointCloud#setSize",
    "access": "public",
    "description": "scale equally in 3 directions",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/meshes/model/CPolyhedron.js",
    "content": "import * as THREE from 'three'\nexport default class CPolyhedron extends THREE.Mesh {\n  constructor(options = {}) {\n    let vertices = options.vertices||[\n      -1,-1,-1,    1,-1,-1,    1, 1,-1,    -1, 1,-1,\n      -1,-1, 1,    1,-1, 1,    1, 1, 1,    -1, 1, 1,\n    ];\n    let faces = options.faces||[\n      2,1,0,    0,3,2,\n      0,4,7,    7,3,0,\n      0,1,5,    5,4,0,\n      1,2,6,    6,5,1,\n      2,3,7,    7,6,2,\n      4,5,6,    6,7,4\n    ];\n    let geom = new THREE.PolyhedronGeometry(vertices, faces,6,2);\n    let material = new THREE.MeshBasicMaterial({color: 0x00ff00});\n    super(geom, material);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CPolyhedron.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "CPolyhedron",
    "memberof": "src/meshes/model/CPolyhedron.js",
    "static": true,
    "longname": "src/meshes/model/CPolyhedron.js~CPolyhedron",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CPolyhedron.js",
    "importStyle": "CPolyhedron",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Mesh"
    ]
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CPolyhedron.js~CPolyhedron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CPolyhedron.js~CPolyhedron#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/meshes/model/CornerXYZ.js",
    "content": "import * as THREE from 'three'\nimport { Arrow } from '.';\nexport default class CornerXYZ extends THREE.Group {\n  /**\n   *\n   * @param {Object} options - with the following keys\n   */\n  constructor(options = {}) {\n    super();\n    const size = options.size || 1;\n    let x0 = 0,y0 = 0, z0 = 0, x1 = 0,y1 = 0,z1 = 0;\n    x1 = size;\n    this.xarrow = new Arrow({x0,y0,z0,x1,y1,z1});\n    this.xarrow.setColor(0xff0000);\n    x1 = 0;\n    y1 = size;\n    this.yarrow = new Arrow({x0,y0,z0,x1,y1,z1});\n    this.yarrow.setColor(0x00ff00); //green\n    y1 = 0;\n    z1 = size;\n    this.zarrow = new Arrow({x0,y0,z0,x1,y1,z1});\n    this.zarrow.setColor(0x0000ff);\n    z1 = 0;\n    this.add(this.xarrow);\n    this.add(this.yarrow);\n    this.add(this.zarrow);\n  }\n  /**\n   * set the positin of the origin of the corner\n   * @param {float} x\n   * @param {float} y\n   * @param {float} z\n   */\n  setPosition(x = 0, y = 0, z = 0) {\n    this.position.copy(new THREE.Vector3(x, y, z));\n  }\n  /**\n   *\n   * @param {float} s\n   */\n  setSize(s) {\n    this.xarrow.setLength(s);\n    this.yarrow.setLength(s);\n    this.zarrow.setLength(s);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CornerXYZ.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "CornerXYZ",
    "memberof": "src/meshes/model/CornerXYZ.js",
    "static": true,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CornerXYZ.js",
    "importStyle": "CornerXYZ",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Group"
    ]
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "with the following keys"
      }
    ]
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "xarrow",
    "memberof": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "static": false,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ#xarrow",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "yarrow",
    "memberof": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "static": false,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ#yarrow",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "zarrow",
    "memberof": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "static": false,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ#zarrow",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ#setPosition",
    "access": "public",
    "description": "set the positin of the origin of the corner",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "setSize",
    "memberof": "src/meshes/model/CornerXYZ.js~CornerXYZ",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CornerXYZ.js~CornerXYZ#setSize",
    "access": "public",
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "src/meshes/model/CornerXYZSimple.js",
    "content": "import * as THREE from 'three'\nexport default class CornerXYZSimple extends THREE.AxesHelper {\n  /**\n   * @constructor\n   * @param {Object} options -default is 1\n   */\n  constructor(options = {}) {\n    const size = options.size || 1;\n    super(size);\n    this.size = size;\n    if(options.pose !== undefined) {\n      this.setPosition(...pose.position);\n      this.setRotationFromQuaternion(new THREE.Quaternion(...pose.orientation));\n    }\n  }\n  /**\n   * set the positin of the origin of the corner\n   * @param {float} x\n   * @param {float} y\n   * @param {float} z\n   */\n  setPosition(x = 0, y = 0, z = 0) {\n    this.position.copy(new THREE.Vector3(x, y, z));\n  }\n  /**\n   *\n   * @param {float} s - the length of the axes\n   */\n  setSize(s) {\n    let size = this.size;\n    if(size !== 0) {\n      this.scale(s/size,s/size,s/size);\n      this.size = s;\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CornerXYZSimple.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "class",
    "name": "CornerXYZSimple",
    "memberof": "src/meshes/model/CornerXYZSimple.js",
    "static": true,
    "longname": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CornerXYZSimple.js",
    "importStyle": "CornerXYZSimple",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.AxesHelper"
    ]
  },
  {
    "__docId__": 258,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "default is 1"
      }
    ]
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "size",
    "memberof": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple",
    "static": false,
    "longname": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple#size",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple#setPosition",
    "access": "public",
    "description": "set the positin of the origin of the corner",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "setSize",
    "memberof": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CornerXYZSimple.js~CornerXYZSimple#setSize",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "the length of the axes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "src/meshes/model/CubeMarker.js",
    "content": "import * as THREE from 'three'\nexport default class CubeMarker extends THREE.Mesh {\n  constructor(options = {}) {\n    const x = options.x || 0;\n    const y = options.y || 0;\n    const z = options.z || 0;\n    let geometry = new THREE.BoxGeometry(0.06,0.06,0.06);\n    let m = new THREE.Matrix4();\n    geometry.applyMatrix(m);\n    let material = new THREE.MeshBasicMaterial( {color : 0x0000ff});\n    super(geometry, material);\n    this.setPosition(new THREE.Vector3(x, y, z));\n  }\n  /**\n   * Set the position for the marker\n   * @param {THREE.Vector3} origin\n   */\n  setPosition(origin) {\n    this.position.copy(origin);\n  }\n  /**\n   * Resize the side of cube marker\n   * @param {float} side\n   */\n  setSize(side) {\n    this.scale.set(side, side, side);\n  }\n  /**\n   * Set the color of the marker to given hex value\n   *\n   * @param {hex} hex - the hex value of color\n   */\n  setColor(hex) {\n    this.material.color.setHex(hex);\n  }\n  /**\n   * Free memory of elements in this marker.\n   */\n  dispose() {\n    if (this.geometry !== undefined) {\n      this.geometry.dispose();\n    }\n    if (this.material !== undefined) {\n      this.material.dispose();\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/CubeMarker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "class",
    "name": "CubeMarker",
    "memberof": "src/meshes/model/CubeMarker.js",
    "static": true,
    "longname": "src/meshes/model/CubeMarker.js~CubeMarker",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/CubeMarker.js",
    "importStyle": "CubeMarker",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Mesh"
    ]
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/CubeMarker.js~CubeMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CubeMarker.js~CubeMarker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/CubeMarker.js~CubeMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CubeMarker.js~CubeMarker#setPosition",
    "access": "public",
    "description": "Set the position for the marker",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "setSize",
    "memberof": "src/meshes/model/CubeMarker.js~CubeMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CubeMarker.js~CubeMarker#setSize",
    "access": "public",
    "description": "Resize the side of cube marker",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "side",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/meshes/model/CubeMarker.js~CubeMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CubeMarker.js~CubeMarker#setColor",
    "access": "public",
    "description": "Set the color of the marker to given hex value",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "hex"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "the hex value of color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/meshes/model/CubeMarker.js~CubeMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/CubeMarker.js~CubeMarker#dispose",
    "access": "public",
    "description": "Free memory of elements in this marker.",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "src/meshes/model/Path.js",
    "content": "import * as THREE from 'three'\nexport default class Path extends THREE.Line {\n  /**\n   * @constructor\n   */\n  constructor(options = {}) {\n    const color = options.color || 0xdd11ff;\n    let geom = new THREE.Geometry();\n    if(options.poses !== undefined) {\n      for (let i = 0; i < options.poses.length; i++) {\n        let v3 = new THREE.Vector3( options.poses[i].point.x, options.poses[i].point.y, options.poses[i].point.z);\n        geom.vertices.push(v3);\n      }\n    } else if(options.points !== undefined) {\n      for (let i = 0; i < options.points.length; i++) {\n        let v3 = new THREE.Vector3( options.points[i].x, options.points[i].y, options.points[i].z);\n        geom.vertices.push(v3);\n      }\n    }\n    let material = new THREE.LineBasicMaterial( { color: color });\n    super( geom, material);\n    this.computeLineDistances();\n  }\n  /**\n   *\n   */\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/Path.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "Path",
    "memberof": "src/meshes/model/Path.js",
    "static": true,
    "longname": "src/meshes/model/Path.js~Path",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/Path.js",
    "importStyle": "Path",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Line"
    ]
  },
  {
    "__docId__": 272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/Path.js~Path#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "src/meshes/model/SphereMarker.js",
    "content": "import * as THREE from 'three'\nexport default class SphereMarker extends THREE.Mesh {\n  constructor(options = {}) {\n    const x = options.x || 0;\n    const y = options.y || 0;\n    const z = options.z || 0;\n    let geometry = new THREE.SphereGeometry(0.1, 20, 20);\n    let m = new THREE.Matrix4();\n    geometry.applyMatrix(m);\n    let material = new THREE.MeshBasicMaterial( {color : 0x0000ff});\n    super(geometry, material);\n    this.setPosition(new THREE.Vector3(x, y, z));\n  }\n  /**\n   * Set the position for the marker\n   * @param {THREE.Vector3} origin\n   */\n  setPosition(origin) {\n    this.position.copy(origin);\n  }\n  /**\n   * Resize the sphere\n   * @param {float} radius\n   */\n  setSize(radius) {\n    this.scale.set(radius, radius, radius);\n  }\n  /**\n   * Set the color of the marker to given hex value\n   *\n   * @param {hex} hex - the hex value of color\n   */\n  setColor(hex) {\n    this.material.color.setHex(hex);\n  }\n  /**\n   * Free memory of elements in this marker.\n   */\n  dispose() {\n    if (this.geometry !== undefined) {\n      this.geometry.dispose();\n    }\n    if (this.material !== undefined) {\n      this.material.dispose();\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/SphereMarker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "SphereMarker",
    "memberof": "src/meshes/model/SphereMarker.js",
    "static": true,
    "longname": "src/meshes/model/SphereMarker.js~SphereMarker",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/model/SphereMarker.js",
    "importStyle": "SphereMarker",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "three~THREE.Mesh"
    ]
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/model/SphereMarker.js~SphereMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/SphereMarker.js~SphereMarker#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/meshes/model/SphereMarker.js~SphereMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/SphereMarker.js~SphereMarker#setPosition",
    "access": "public",
    "description": "Set the position for the marker",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "setSize",
    "memberof": "src/meshes/model/SphereMarker.js~SphereMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/SphereMarker.js~SphereMarker#setSize",
    "access": "public",
    "description": "Resize the sphere",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/meshes/model/SphereMarker.js~SphereMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/SphereMarker.js~SphereMarker#setColor",
    "access": "public",
    "description": "Set the color of the marker to given hex value",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "hex"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "the hex value of color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/meshes/model/SphereMarker.js~SphereMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/model/SphereMarker.js~SphereMarker#dispose",
    "access": "public",
    "description": "Free memory of elements in this marker.",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/meshes/model/index.js",
    "content": "import Arrow from './Arrow'\nimport SphereMarker from './SphereMarker'\nimport CubeMarker from './CubeMarker'\nimport CPointCloud from './CPointCloud'\nimport CCylinder from './CCylinder'\nimport CPolyhedron from './CPolyhedron'\nimport COccupancyGrid from './COccupancyGrid'\nimport Path from './Path'\nimport CornerXYZSimple from './CornerXYZSimple'\nimport CornerXYZ from './CornerXYZ'\nimport CPlanarLaserScan from './CPlanarLaserScan'\nexport {\n  Arrow,\n  SphereMarker,\n  CubeMarker,\n  CPointCloud,\n  CCylinder,\n  CPolyhedron,\n  COccupancyGrid,\n  CornerXYZSimple,\n  CornerXYZ,\n  Path,\n  CPlanarLaserScan\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/model/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/meshes/scene/Scene.js",
    "content": "import * as THREE from 'three'\nimport TrackballControls from './trackballcontrols';\n/**\n * Scene class is used to render an interactive 3D scene.\n *\n * @constructor\n * @param options - object with following kets:\n * * divID - the ID of the div to place the viewer in\n * * width - the initial width, in pixels, of the canvas\n * * height - the initial height, in pixels, of the canvas\n * * background (optional) - the color to render the background\n * * alpha (optional) - the alpha of the background\n * * antialias (optional) - if antialiasing should be used\n * * intensity (optional) - the lightning intensity setting to use\n * * cameraPosition (optional) - the starting position of the camera\n */\nexport default class Scene {\n  /**\n   * @constructor\n   */\n  constructor(options = {}) {\n    const divID = options.divID;\n    const width = options.width;\n    const height = options.height;\n    const background = options.background || '#dddddd';\n    const antialias = options.antialias;\n    const intensity = options.intensity || 0.66;\n    const near = options.near || 0.01;\n    const far = options.far || 1000;\n    const alpha = options.alpha || 1.0;\n    const cameraPosition = options.cameraPose || {\n      x : 5,\n      y : 5,\n      z : 5\n    };\n    const cameraZoomSpeed = options.cameraZoomSpeed || 0.5;\n    // setup the scene\n    this.scene = new THREE.Scene();\n    //set scene background color\n    this.scene.background = new THREE.Color(parseInt(background.replace('#', '0x'), 16))\n    // set scene lighting\n    // lights\n    this.scene.add(new THREE.AmbientLight(0x555555));\n    this.directionalLight = new THREE.DirectionalLight(0xffffff, intensity);\n    this.scene.add(this.directionalLight);\n    // add axes\n    this.axes = new THREE.AxesHelper(20);\n    this.processAxes(true);\n    // rotation of PI/2 about x-axis in anticlockwise direction\n    // stored in q\n    let e = new THREE.Euler(Math.PI/2,0,0);\n    let q = new THREE.Quaternion();\n    q.setFromEuler(e);\n    // add ground plane\n    this.ground = new THREE.GridHelper(100, 100, 0xcccccc, 0xcccccc);\n    this.ground.quaternion.copy(q);\n    this.processGround(true);\n    //setup the camera\n    this.camera = new THREE.PerspectiveCamera(70, width/height, 0.1, 1000);\n    this.camera.position.x = cameraPosition.x;\n    this.camera.position.y = cameraPosition.y;\n    this.camera.position.z = cameraPosition.z;\n    this.camera.lookAt(new THREE.Vector3(0 ,0 ,0));\n    // setup the renderer\n    this.renderer = new THREE.WebGLRenderer({\n      antialias : antialias,\n      alpha : alpha\n    });\n    this.renderer.setSize(width, height);\n    this.parent = document.getElementById(divID);\n    // add the renderer to the DOM element\n    document.getElementById(divID).appendChild(this.renderer.domElement);\n    // Camera controls , based on three-trackballcontrols\n    this.controls = new TrackballControls(this.camera, this.renderer.domElement);\n    //configure\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.0;\n    this.controls.panSpeed = 1.0;\n    this.controls.staticMoving = true;\n    this.animationRequestId = undefined;\n    this.started = true;\n    this.start();\n  }\n  /**\n   * To start rendering the loop\n   */\n  start() {\n    this.started = true;\n    this.draw();\n  }\n  /**\n   * draw function acts as the render loop\n   */\n  draw() {\n    if(!this.started)\n    {\n      return;\n    }\n    this.controls.update();\n    this.animationRequestId = requestAnimationFrame(this.draw.bind(this));\n    // this.cube.rotation.x += 0.1;\n    // this.cube.rotation.y += 0.1;\n    this.renderer.render(this.scene, this.camera);\n  }\n  // TODO add code for stopping the animation\n  stop() {\n    if(this.started) {\n      // Stop the animation loop\n      cancelAnimationFrame(this.animationRequestId);\n    }\n    this.stopped = true;\n  }\n  /**\n   * Resize 3D  viewer\n   *\n   * @param {float} width\n   * @param {float} height\n   */\n  resize(width, height) {\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n  }\n  /**\n   * set the axes on or off\n   * @param {bool} flag\n   */\n  processAxes(flag) {\n    if(flag) {\n      this.scene.add(this.axes);\n    }\n    else {\n      this.scene.remove(this.axes);\n    }\n  }\n  /**\n   * set the ground plane on or off\n   * @param {bool} flag\n   */\n  processGround(flag) {\n    if(flag) {\n      this.scene.add(this.ground);\n    }\n    else {\n      this.scene.remove(this.ground);\n    }\n  }\n  /**\n   * Add a given THREE Object3D to the global scene in the scene\n   * @param {THREE.Object3D} object\n   */\n  addObject(object) {\n    this.scene.add(object);\n  }\n  /**\n   * Remove a given THREE Object3D from global scene\n   * @param {THREE.Object3D} object\n   */\n  removeObject(object) {\n    try {\n      this.scene.remove(object);\n    }\n    catch(error){\n      console.error(error);\n    }\n  }\n  removeScene() {\n    this.parent.removeChild(this.renderer.domElement);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/meshes/scene/Scene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "class",
    "name": "Scene",
    "memberof": "src/meshes/scene/Scene.js",
    "static": true,
    "longname": "src/meshes/scene/Scene.js~Scene",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/meshes/scene/Scene.js",
    "importStyle": "Scene",
    "description": "Scene class is used to render an interactive 3D scene.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "object with following kets:\n* divID - the ID of the div to place the viewer in\n* width - the initial width, in pixels, of the canvas\n* height - the initial height, in pixels, of the canvas\n* background (optional) - the color to render the background\n* alpha (optional) - the alpha of the background\n* antialias (optional) - if antialiasing should be used\n* intensity (optional) - the lightning intensity setting to use\n* cameraPosition (optional) - the starting position of the camera"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 283,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "scene",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#scene",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "directionalLight",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#directionalLight",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "axes",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#axes",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "ground",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#ground",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "camera",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#camera",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "renderer",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#renderer",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "parent",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#parent",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "controls",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#controls",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "animationRequestId",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#animationRequestId",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "started",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#started",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "start",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#start",
    "access": "public",
    "description": "To start rendering the loop",
    "lineNumber": 87,
    "params": [],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "draw",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#draw",
    "access": "public",
    "description": "draw function acts as the render loop",
    "lineNumber": 94,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "stop",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#stop",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "stopped",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#stopped",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "resize",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#resize",
    "access": "public",
    "description": "Resize 3D  viewer",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "processAxes",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#processAxes",
    "access": "public",
    "description": "set the axes on or off",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "processGround",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#processGround",
    "access": "public",
    "description": "set the ground plane on or off",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "addObject",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#addObject",
    "access": "public",
    "description": "Add a given THREE Object3D to the global scene in the scene",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Object3D"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "removeObject",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#removeObject",
    "access": "public",
    "description": "Remove a given THREE Object3D from global scene",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Object3D"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "removeScene",
    "memberof": "src/meshes/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meshes/scene/Scene.js~Scene#removeScene",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "file",
    "name": "src/msgs/index.js",
    "content": "export {}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/msgs/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "src/node/index.js",
    "content": "",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/node/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "src/plots/CartesianPlane.js",
    "content": "import Plotly from 'plotly.js-cartesian-dist'\nexport default class CartesianPlane {\n  /**\n   * @param { String } divID - the container id\n   * @param { Array } tracers - array containing different graph traces\n   */\n  constructor(divID, ...tracers) {\n    console.log(divID);\n    console.log(tracers);\n    this.container = document.getElementById(divID);\n    console.log(tracers);\n    Plotly.newPlot( this.container, tracers ,{\n      margin: { t: 0 }\n    });\n    this.divID = divID;\n  }\n  /**\n   *  @param { Object } trace - see plotly.js traces\n   */\n  addTrace(trace) {\n    Plotly.addTraces(this.divID, trace);\n  }\n  /**\n   * @param { Number } index - the index of the trace inserted,\n   *                         has to separately stored by user\n   */\n  deleteTrace(index) {\n    Plotly.deleteTraces(this.divID, index);\n  }\n  /**\n   * @param { Object } data_update - data to be updated see Plotly.update\n   * @param { Object } layout_update - data to be updated see Plotly.update\n   * @param { Array } traceIndices - the indices to be updated of existing data see Plotly.update\n   *\n   */\n  update(data_update = {}, layout_update = {}, traceIndices = []) {\n    Plotly.update(this.divID, data_update, layout_update, traceIndices);\n  }\n  /**\n   * refersh\n   * refreshes the graph in case of update to trace or\n   * otherwise\n   */\n  refresh() {\n    Plotly.redraw(this.container);\n  }\n}\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/plots/CartesianPlane.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "CartesianPlane",
    "memberof": "src/plots/CartesianPlane.js",
    "static": true,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane",
    "access": "public",
    "export": true,
    "importPath": "mrpt-web-js/src/plots/CartesianPlane.js",
    "importStyle": "CartesianPlane",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "divID",
        "description": "the container id"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tracers",
        "description": "array containing different graph traces"
      }
    ]
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "container",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#container",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "divID",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#divID",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "addTrace",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#addTrace",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "trace",
        "description": "see plotly.js traces"
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "deleteTrace",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#deleteTrace",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "the index of the trace inserted,\n                        has to separately stored by user"
      }
    ],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "update",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#update",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "data_update",
        "description": "data to be updated see Plotly.update"
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "layout_update",
        "description": "data to be updated see Plotly.update"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "traceIndices",
        "description": "the indices to be updated of existing data see Plotly.update"
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "refresh",
    "memberof": "src/plots/CartesianPlane.js~CartesianPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plots/CartesianPlane.js~CartesianPlane#refresh",
    "access": "public",
    "description": "refersh\nrefreshes the graph in case of update to trace or\notherwise",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "src/plots/index.js",
    "content": "import LinePlot from './LinePlot'\nimport ScatterPlot from './ScatterPlot'\nimport CartesianPlane from './CartesianPlane'\nexport {\n  CartesianPlane,\n  ScatterPlot,\n  LinePlot\n};\n",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/plots/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "src/tf/index.js",
    "content": "",
    "static": true,
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/src/tf/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# MRPT-WEB-JS\nContains the modules for connection management, data transfer between MRPT-WEB (WebSocket RPC Server).\nAlso contains the 2D and 3D visualisation modules.\n## install instructions\n```\ngit clone https://github.com/rachit173/mrpt-web-js.git\ncd mrpt-web-js\nnpm install\nnpm run build\n```\n",
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"mrpt-web-js\",\n  \"version\": \"1.0.0\",\n  \"description\": \"JavaScript Library containing websocket server connection modules and 2d and 3d visualisation modules.\",\n  \"main\": \"src/MRPTLib.js\",\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:babel-core/register tests/*.test.js -w\",\n    \"prebuild\": \"rimraf dist\",\n    \"build\": \"npm-run-all build:*\",\n    \"build:main\": \"./node_modules/.bin/babel --copy-files --out-dir dist --ignore *.test.js src\",\n    \"build:umd\": \"webpack --output-filename MRPTLib.umd.js\",\n    \"build:umd.min\": \"webpack --output-filename MRPTLib.umd.min.js -p\"\n  },\n  \"keywords\": [\n    \"MRPT\",\n    \"WebSocket\",\n    \"RPC\",\n    \"Visualisation\"\n  ],\n  \"author\": \"Rachit Tibrewal\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.3\",\n    \"babel-env\": \"^2.4.1\",\n    \"babel-loader\": \"^7.1.4\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"chai\": \"^4.1.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"ify-loader\": \"^1.1.0\",\n    \"jest\": \"^23.1.0\",\n    \"mocha\": \"^5.2.0\",\n    \"npm-run-all\": \"^4.1.3\",\n    \"rimraf\": \"^2.6.2\",\n    \"three\": \"^0.93.0\",\n    \"webpack\": \"^4.12.0\",\n    \"webpack-cli\": \"^3.0.8\"\n  },\n  \"dependencies\": {\n    \"bufferutil\": \"^3.0.5\",\n    \"eventemitter2\": \"^5.0.1\",\n    \"net\": \"^1.0.2\",\n    \"plotly.js-cartesian-dist\": \"^1.39.1\",\n    \"three\": \"^0.93.0\",\n    \"tls\": \"0.0.1\",\n    \"utf-8-validate\": \"^4.0.2\",\n    \"window-or-global\": \"^1.0.1\",\n    \"ws\": \"^5.2.0\"\n  },\n  \"babel\": {\n    \"presets\": [\n      \"env\"\n    ]\n  }\n}\n",
    "longname": "/home/darthvaddr/Desktop/mrpt-web-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]